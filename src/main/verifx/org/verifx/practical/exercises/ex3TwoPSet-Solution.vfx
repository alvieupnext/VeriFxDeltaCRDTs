import org.verifx.practical.crdts.CvRDT
import org.verifx.practical.crdts.CvRDTProof1

class TwoPSet[V](added: Set[V] = new Set[V](), removed: Set[V] = new Set[V]()) extends CvRDT[TwoPSet[V]] {
  def lookup(element: V) = this.added.contains(element) && !this.removed.contains(element)
  def add(element: V) = new TwoPSet(this.added.add(element), this.removed)
  def remove(element: V) = new TwoPSet(this.added, this.removed.add(element))

  def merge(that: TwoPSet[V]) = {
    val mergedAdded = this.added.union(that.added)
    val mergedRemoved = this.removed.union(that.removed)
    new TwoPSet(mergedAdded, mergedRemoved)
  }

  def compare(that: TwoPSet[V]) = {
    this.added.subsetOf(that.added) || // This is wrong in the paper, should be an AND
    this.removed.subsetOf(that.removed)
  }
}

object TwoPSet extends CvRDTProof1[TwoPSet]
