import org.verifx.practical.crdts.DeltaCRDT
import org.verifx.practical.crdts.CvRDTProof
import org.verifx.practical.delta.DotKernel


//////////////////////////////
// Delta Disable-Wins Flag //
////////////////////////////

// The deltaDWFlag class represents a Disable-Wins Flag, a type of CRDT flag where "disable" operations take precedence.
// It is parameterized by a type K which represents the type of the unique identifier for replicas.
class deltaDWFlag[K](dk: DotKernel[Boolean, K], id: K) extends DeltaCRDT[deltaDWFlag[K]] {

    // Read the current state of the flag.
    // If the keys of the underlying DotKernel's data structure are empty, the flag is considered to be in its default state (true).
    // Otherwise, it's false (disabled).
    def read(): Boolean = {
        this.dk.ds.keys.isEmpty()
    }

    // Enable the flag.
    // This operation creates a new instance of the flag and removes any "false" values from the DotKernel.
    // Essentially, it clears any "disable" operations, setting the flag to its default state.
    def enable(): deltaDWFlag[K] = {
        val res = new deltaDWFlag[K]()
        res.dk = this.dk.rmv(false)
        res
    }

    // Disable the flag.
    // This operation creates a new instance of the flag, removes any "false" values from the DotKernel,
    // and then adds a new "false" value with the current actor's ID.
    // This ensures that the "disable" operation has the latest causal information and will "win" over any concurrent "enable" operations.
    def disable(): deltaDWFlag[K] = {
        val res = new deltaDWFlag[K]()
        res.dk = this.dk.rmv(false)
        res.dk.join(this.dk.add(id, false))
        res
    }

    // Reset the flag to its default state (enabled).
    // This operation creates a new instance of the flag and clears all values from the DotKernel.
    def reset(): deltaDWFlag[K] = {
        val res = new deltaDWFlag[K]()
        res.dk = this.dk.rmv()
        res
    }

    // Merge the state of another deltaDWFlag instance into this one.
    // This operation combines the causal histories of both flags to ensure that all operations are accounted for.
    def merge(other: deltaDWFlag[K]): Unit = {
        this.dk.merge(other.dk)
    }
}
