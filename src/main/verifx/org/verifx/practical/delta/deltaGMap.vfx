import org.verifx.practical.crdts.DeltaCRDT
import org.verifx.practical.crdts.CvRDTProof2

//A GMap that returns a key value pair as delta
class deltaGMap[K, V](map: Map[K, V] = new Map[K,V]()) extends DeltaCRDT[deltaGMap[K, V]] {
    //return a new GMap
    def add(key: K, value: V) = {
      val res = new Map[K, V]()
      res.add(key, value)
      new deltaGMap(res)
    }

    def lookup(key: K) = this.map.contains(key)

    def get(key: K) = this.map.get(key)

    //Placeholder combine, decided by what type the value is
    def merge(that: deltaGMap[K, V]) = new deltaGMap(this.map.combine(that.map, (v1: V, v2: V) => v1))

}

object deltaGMap extends CvRDTProof2[deltaGMap]